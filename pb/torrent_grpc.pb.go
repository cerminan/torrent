// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentServiceClient is the client API for TorrentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentServiceClient interface {
	Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchRes, error)
	Files(ctx context.Context, in *FilesReq, opts ...grpc.CallOption) (*FilesRes, error)
	ReadAt(ctx context.Context, in *ReadAtReq, opts ...grpc.CallOption) (*ReadAtRes, error)
}

type torrentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentServiceClient(cc grpc.ClientConnInterface) TorrentServiceClient {
	return &torrentServiceClient{cc}
}

func (c *torrentServiceClient) Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchRes, error) {
	out := new(FetchRes)
	err := c.cc.Invoke(ctx, "/TorrentService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) Files(ctx context.Context, in *FilesReq, opts ...grpc.CallOption) (*FilesRes, error) {
	out := new(FilesRes)
	err := c.cc.Invoke(ctx, "/TorrentService/Files", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) ReadAt(ctx context.Context, in *ReadAtReq, opts ...grpc.CallOption) (*ReadAtRes, error) {
	out := new(ReadAtRes)
	err := c.cc.Invoke(ctx, "/TorrentService/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServiceServer is the server API for TorrentService service.
// All implementations must embed UnimplementedTorrentServiceServer
// for forward compatibility
type TorrentServiceServer interface {
	Fetch(context.Context, *FetchReq) (*FetchRes, error)
	Files(context.Context, *FilesReq) (*FilesRes, error)
	ReadAt(context.Context, *ReadAtReq) (*ReadAtRes, error)
	mustEmbedUnimplementedTorrentServiceServer()
}

// UnimplementedTorrentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentServiceServer struct {
}

func (UnimplementedTorrentServiceServer) Fetch(context.Context, *FetchReq) (*FetchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedTorrentServiceServer) Files(context.Context, *FilesReq) (*FilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Files not implemented")
}
func (UnimplementedTorrentServiceServer) ReadAt(context.Context, *ReadAtReq) (*ReadAtRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedTorrentServiceServer) mustEmbedUnimplementedTorrentServiceServer() {}

// UnsafeTorrentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServiceServer will
// result in compilation errors.
type UnsafeTorrentServiceServer interface {
	mustEmbedUnimplementedTorrentServiceServer()
}

func RegisterTorrentServiceServer(s grpc.ServiceRegistrar, srv TorrentServiceServer) {
	s.RegisterService(&TorrentService_ServiceDesc, srv)
}

func _TorrentService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Fetch(ctx, req.(*FetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_Files_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).Files(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentService/Files",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).Files(ctx, req.(*FilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentService/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).ReadAt(ctx, req.(*ReadAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentService_ServiceDesc is the grpc.ServiceDesc for TorrentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TorrentService",
	HandlerType: (*TorrentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _TorrentService_Fetch_Handler,
		},
		{
			MethodName: "Files",
			Handler:    _TorrentService_Files_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _TorrentService_ReadAt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/torrent.proto",
}
